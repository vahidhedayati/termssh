#!/bin/bash 

##############################################################################
#    Bash script written by Vahid Hedayati September 2012
#    forked and modified by nean <nean.and.i@gmail.com>
#    Download termssh
#    cp termssh /usr/local/bin/ && chmod 755 /usr/local/bin/termssh
#
##############################################################################
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
##############################################################################
#  Script to manage/automate terminator layouts / connections
#  You can connect to servers via a text file -f {filename}
#  -fs fullscreen mode if not set to 1 below
#  -r  remove layout i.e. current layout being generated - refresh its config
#  -w 2/4/8 windows can be defined to open windows per tab.
#  -c to connect -d to remove existing layout
#  -n "my_gateway_mysql" sets the layout name as it  in speech marks if it has spaces
#  -s "gateway-(lon|gla)[01-02] myql[01-03] apache02"    always in speech marks, space seperated list
#  or 
#  -f ./path/to/file.txt - can contain brace expansion
##############################################################################



#############################################################################################


###############################
# If you are trying get it to work - more verbosity is given and connections are 
# converted to local /bin/bash  command on local machine executing this script
DEBUG=1;


###############################
# Amount of windows to open up with terminator
# can be set to 2,4 or 8 
DEFAULT_WINDOWS=4


###############################
# NEW Feature - now auto groups servers 
# With -x 1-10 a user can connect to multiple servers multiple times and have each instance 1 of each server 
# in a specific group and so forth - its automatic
# even with 1 connection per server it will group tomcats in one group and apaches in another ;)
# if enabled and servers match grouping conventions then groups defined by set_grouping function
# if set to 0 -g required to enable grouping

AUTO_GROUPING_ENABLED=0;


###############################
# Connection amount per server
# Another addition sometimes I wish to connect to same servers multiple times
# maybe one to watch output whilst issuing command to another
# -x 1-10 default is one time and with above grouping each apache will be in apache-1 apache-2
# so londonapa01gw and londonapa01bw with -x 2 will result in 
# first connection londonapa01gw in group apache-1
# second connection londonapa01gw in group apache-2
# repeated with 2nd server so what ever you put in group apache-1 will be repeatd in instance of both servers

DEFAULT_CONNECTIONS=1;



###############################
# Full screen mode - toggle between 0/1 
# if set to 0 then -fs is required as part of arguments to force new connections to full screen
# mode. If an existing layout -r -fs is required as part of argument to rediscover connection 
# and set it as full screen

FULL_SCREEN_MODE=0;




###############################
# Prompt before re-using existing layouts
# set to 0 so if input of file matches existing layouts
# termssh would then load the layout rather than try to rediscover
# or read in the actual file.
# if set to 0 -r  would be required to remove the layout and recreate
# if set to 1 if any file name matches existing layout a choice is then
# given to recreate it or reconnect to existing layout.
# -r can be used whilst set to one which should ignore this prompt

REUSE_LAYOUT_PROMPT=0;



#############################################################################################
# Terminator configuration dir and file as well as temp storage file 

terminator_config_folder="$HOME/.config/terminator"
terminator_config_file="$terminator_config_folder/config"

# due to permissions issues userid added to filename
# to stop permission denied messages
userid=$(id -u)
FILE="/tmp/terminator-hosts-"$userid".collect";

#############################################################################################



############################################################################################
# This is method to auto discover - you can change method to improve speed of discovery
# querymethod choices are configured in function check_method : 
# you can change to :
# host nslookup dig shortdig netcat nc ping disabled
# disabled only suggested for vpn access

#querymethod="nc";
querymethod="disabled";


#############################################################################################

#############################################################################################
# DEFAULT GLOBAL CONFIGURATION FOR TERMINATOR CONFIG FILE GENERATION
DF="[global_config]\n  enabled_plugins = LaunchpadCodeURLHandler, APTURLHandler,";
DF="$DF LaunchpadBugURLHandler\n [keybindings]\n[profiles]\n"
DF="$DF  [[default]]\n    scrollback_infinite = True\n    ";
DF="$DF split_to_group = true\n    foreground_color = \"#ffffff\""
DEFAULT_CONFIG=$DF;
#############################################################################################

#############################################################################################
#####  END OF VARIABLES AND CONFIGURATION - BELOW IS THE MAIN CODE USED FOR TERMSSH   #######
#############################################################################################




#############################################################################################
# This  validate servers is the core of auto discovery - 
# disable check method line 137 to not try to check server - renable once it works
# use -l and followed by what you would give for -a to list or enable debug mode so it lists
# all hosts

conapps="";
function validate_servers() {
		> $FILE
	serverarray=( $server_types )
	## For 6 types of service inputs
	for index in  0 1 2 3 4 5   
	do
	#Set currapp as array value 
	currapp=${apparray[index]}
	
	if [ "$currapp" != "" ]; then 
		 conapps=$conapps"_"$currapp;
		## Does currentapplication has a value?
		## Work through env array from above
		for serverindex in  0 1 2 3 4
		do
		#set currenv as currentenv value
				currserver=${serverarray[serverindex]}
		#echo $currserver
		## if it has a value
				if [ "$currserver" != "" ]; then 
			# a-z go through the servers
			for xx in  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
			do
			x=${alpharray[xx]}
			if [ "$x" != "" ];then
				server="$host_start$currserver$host_env$x$currapp"
				if [ $DEBUG -ge 1 ]; then
				echo  "Current server: $server "
				fi
				check_method;
			fi
			done
		fi
		done
	fi
	done
	if [ $DEBUG -ge 1 ]; then
	echo  "_________________________________________________"
	echo  "CONNECTIONS WILL BE MADE TO:"
	echo  "_________________________________________________"
	cat $FILE
		fi
}
#############################################################################################


#############################################################################################
# this sets up terminator connection ensures there are entries in tmp file before launching terminator
# also ensures you are not logged in as root
function terminator_connect() {
				check_root;
		check_reconnection;
				filesize=`wc -l $FILE|awk '{print $1}'`
				if [ $filesize -gt 0 ];then
					set_terminator;
					layout=${layout//[[:space:]]}
					terminator -l "$layout" 2>/dev/null  &
				else
						echo "File $FILE has no entries - terminator not launched"
				fi

}



#############################################################################################
#SERVER CHECK METHODS
function check_method()  {
		#> $FILE
		if [ "$querymethod" == "nc" ]; then 
			nc -v  -w 1 $server -z 22 2>&1|grep succeeded > /dev/null	
		elif [ "$querymethod" == "netcat" ]; then 
			netcat -v  -w 1 $server -z 22 2>&1|grep succeeded >/dev/null
		elif [ "$querymethod" == "host" ]; then 
			host $server | awk '/^[[:alnum:].-]+ has address/ { print $4 ; exit }' 2>&1|grep [1-9] > /dev/null
		elif [ "$querymethod" == "nslookup" ]; then 
			nslookup $server | awk '/^Address: / { print $2 ; exit }'  2>&1|grep [1-9] > /dev/null
		elif [ "$querymethod" == "dig" ]; then 
			dig $server | awk '/^;; ANSWER SECTION:$/ { getline ; print $5 ; exit }'  2>&1|grep [1-9] > /dev/null
		elif [ "$querymethod" == "shortdig" ]; then 
			dig +short $server | awk 'NR > 1 { exit } ; 1 2>&1|grep [1-9] > /dev/null'
		elif [ "$querymethod" == "ping" ]; then 
			ping -c1 $server 2>&1|grep bytes > /dev/null
		elif [ "$querymethod" == "disabled" ]; then 
			echo "succeeded" > /dev/null
		else
			nc -v -w 1 $server -z 22 2>&1|grep succeeded > /dev/null	
		fi
		if [ $? = 0 ]; then
			echo $server >> $FILE
		if [ $DEBUG -ge 1 ];then
			echo " $server : querymethod = $querymethod  -- SUCCEEDED"
		fi
		else
	if [ $DEBUG -ge 1 ];then
			echo " $server : querymethod = $querymethod  -- FAILED WILL NOT BE USED FOR CONNECTION"
		 fi
		fi
}
#############################################################################################


#############################################################################################
# AUTO_GROUPING_ENABLED if set to 1 uses above convention name configuration to check current
# server being processed and if it matches then group it is placed in specific group
groupname="";
function set_grouping() {
	groupname=$(shuf -n 1 /usr/share/dict/words | tr -cd "[:alpha:]")
}
#############################################################################################



#############################################################################################
# Screen resolution 
function set_resolution() { 
	horizontal=`xdpyinfo  | grep 'dimensions:'|awk '{print $2}'|awk -F"x" '{print $1}'`
	vertical=`xdpyinfo  | grep 'dimensions:'|awk '{print $2}'|awk -F"x" '{print $2}'`
	unknown=0;
	if ((horizontal)) 2>/dev/null; then
		horizontal=$((horizontal))
		vertical=$((vertical))
	else
		horizontal=800
		vertical=600
		unknown=1;
	fi
	if [ $unknown -eq 0 ] && [ $FULL_SCREEN_MODE -ne 1 ]; then
		horizontal=`echo "scale = 0 ; $horizontal / 1.2" | bc `
		vertical=`echo "scale = 0 ; $vertical / 1.2" | bc `
	fi
}
#############################################################################################

#############################################################################################
# This finds layout name being processed and using ed removes block of config
function del_entry() { 
	 grep "$layout" $terminator_config_file > /dev/null
	if [ $? = 0 ]; then
		delids=`egrep -n "( \\\[\\\[[a-z]|^\\\[\\\[[a-z])" $HOME/.config/terminator/config|grep -v default|grep -A1 "$layout"|awk -F":" '{print $1}'|tr "\n" " "`
		delarray=( $delids )
		val1=${delarray[0]}
		val2=${delarray[1]}
	if [ "$val2"  == "" ]; then 
		val2=`wc -l $terminator_config_file|awk '{print $1}'`
	else
		((val2--))
	fi
	doit=$val1","$val2"d"
	ed -s $terminator_config_file << EOF
$doit
.
w
q
EOF
	colourit red "`echo $LOGNAME` you have issued -r : Layout  $layout has now been removed !!"
	colourit blue "Will recreate $layout "
	else
		colourit red "could not find $layout in $config - -r ignored"
	fi

}
#############################################################################################

#############################################################################################
#  used to confirm if they wanted to refresh config which is overridden by -r
#  REUSE_LAYOUT_PROMPT calls this
function check_layout() { 
		grep "$layout" $terminator_config_file > /dev/null
		if [ $? = 0 ]; then
			colourit red "Profile : $layout exists !!!!"
			colourit blue "Would you like to remove layout (y/n)?"
			read choice;
			if [ "$choice" == "y" ];then
				colourit blue "Deleting Entry for $layout from $terminator_config_file"
				del_entry; 
			fi
	fi
}

#############################################################################################

#############################################################################################
# function used to confirm if layout is new or has already been added
LAYOUT_FOUND=0;
function find_layout() { 
		grep "$layout" $terminator_config_file > /dev/null
		if [ $? = 0 ]; then
			LAYOUT_FOUND=1;
		fi
}		
#############################################################################################

#############################################################################################
# -c standalone option to manage existing layout connection 
# lists layouts numerically selectable
function connect_existing_layout() { 
	colourit blue  "You are about to connect to an existing terminator layout, please type in the number to remove the layout"	
	PS3='Choose your terminator connection: '
	OLDIFS=$IFS
	IFS=$'\n'
	layouts=`egrep "( \\\[\\\[[a-z]|^\\\[\\\[[a-z])" $HOME/.config/terminator/config|grep -v default|tr -d "["|tr -d "]"`
	echo
		select layout  in $layouts
		do
		#IFS=$OLDIFS
		layout=${layout//[[:space:]]}
		echo
		echo "connecting to \"$layout\""
		terminator -l "$layout" 2>/dev/null  &
		break
		done
	exit
}
#############################################################################################

#############################################################################################
# -d standalone option to manage existing layout removal 
# lists layouts numerically selectable
function delete_existing_layout() { 

	colourit red "WARNING ! You are about to remove a terminator layout, please type in the number to remove the layout"	
	PS3="Choose your terminator connection to remove:"
	OLDIFS=$IFS
	IFS=$'\n'
	layouts=`egrep "( \\\[\\\[[a-z]|^\\\[\\\[[a-z])" $HOME/.config/terminator/config|grep -v default|tr -d "["|tr -d "]"`
	echo
		select layout  in $layouts
		do
		#IFS=$OLDIFS
		layout=${layout//[[:space:]]}
		echo
		colourit red "Deleting $layout"
		del_entry;
		break
		done
	exit
}
#############################################################################################

#############################################################################################
# -s s1,s2,s3,s4 
# this reads in a list of comma seperated servers as input and adds them to temp file to be
# processed by set_terminator like -f {file} option
function read_cli_servers() { 
>$FILE
for val in `echo $servernames`
do
	echo $val >> $FILE
done


}

function set_windows() { 
	 if ((WINDOWS)) 2>/dev/null; then
		WINDOWS=$((WINDOWS))
	else
		WINDOWS=$DEFAULT_WINDOWS;
	fi	
}
#############################################################################################



#############################################################################################
# process config ensures terminator config folder file exists, if file has layouts then 
# it adds this layout so londong as no other layouts have the same name, if same name found it 
# will launch it if current config appears incomplete it will back up and replace it with 
# new global config and new layout then launch terminator
#############################################################################################
CONFIG_LAYOUT="";
function process_config() { 

	if [ ! -d $terminator_config_folder ]; then
		echo "creating $terminator_config_folder"
		mkdir -p $terminator_config_folder
	fi
	if [ ! -f $terminator_config_file ]; then
		echo "not found $terminator_config_file"
		touch $terminator_config_file
		echo -e "$DEFAULT_CONFIG" > $terminator_config_file
		echo -e "$CONFIG_LAYOUT" >> $terminator_config_file
	else
	grep "\[layouts\]" $terminator_config_file > /dev/null
	if [ $? = 0 ]; then
		 grep "$layout" $terminator_config_file > /dev/null
		 if [ $? = 0 ]; then
		 colourit blue "Loading $layout"
		else
			colourit blue "Layout by the name of: $layout not found in $terminator_config_file"
			colourit blue "Will push $layout to your configuration and attempt to load it"
			in1="[layouts]"
			out1=`echo -e $CONFIG_LAYOUT`;
			in=$in1 out=$out1 perl -pi.nk -e 's/\Q$ENV{"in"}/$ENV{"out"}/g'  $terminator_config_file 
		fi
	 else
		newfile=$terminator_config_file.$$
		cp $terminator_config_file $newfile
		echo "old config backed up as $newfile"
		grep "\[global_config\]" $terminator_config_file > /dev/null
		if [ $? = 0 ]; then
			echo -e "[layouts]\n" >> $terminator_config_file
			echo -e "$CONFIG_LAYOUT" >> $terminator_config_file
		else
			echo -e "$DEFAULT_CONFIG" > $terminator_config_file
			echo -e "$CONFIG_LAYOUT" >> $terminator_config_file
		fi
	 fi
	 fi
}
# End of process_config
#############################################################################################



#############################################################################################
#-x numeric value 
# so for reach server how many times to open a connection 
# this function repeats server reconnections
# this goes through FILE and if there is any brace expansion to be done 
# if it finds it expands and servers are returned with bloated server list
#############################################################################################
function check_reconnection() { 
	local value=$reconnect;
	if [ "$value" == "" ]; then
		value=$DEFAULT_CONNECTIONS;
	fi
	if ((value)) 2>/dev/null; then
		value=$((value));
		j=0;
		> $FILE.tmp
		> $FILE.tmp1
			FILE1=$FILE;
			FILE=$FILE.tmp1
		> $FILE;
		> $FILE1.tmp;

		for current_server in `cat $FILE1`
		do
			#brace_expansion=`echo $current_server|sed 's:(:{:g; s:):}:g; s:|:,:g; s:\[:{:g; s:\]:}:g; s:-:\.\.:g; s/^//;s/$//'`
			server=`echo $current_server|sed 's:(:{:g; s:):}:g; s:|:,:g; s/^//;s/$//'`
					for times in `echo $server|grep -o "\["`; do server=`echo $server|sed 's/\(.*\)\[\(.*\)-\(.*\)]\(.*\)/\1\{\2\.\.\3\}\4/g'`; done
					brace_expansion=$server;
			servers_layout=`echo $current_server|sed 's:(:_:g; s:):_:g; s:|:_:g; s:\[:_:g; s:\]:_:g; s:-:_:g; s/^//;s/$//'`
			if [ $DEBUG -ge 1 ];then
						 echo " $current_server changed to: $brace_expansion"
					fi
			for server in `(eval echo $brace_expansion)`
			do
			check_method;
			done
		done

		# set it once for whole group instead of single ones
		set_grouping;
		
		for ((i=0; i < $value; i++)) 
		do
			((j++))
			# set it for single ones
			#set_grouping
			for servers in `cat $FILE`
				do
					input_layout=$input_layout$server_layout
					
					if [ -n "$groupname" ];then
						if [ $DEBUG -ge 1 ];then
							echo "FOUND $groupname"
							echo $servers"|"$groupname"-"$j   $FILE1.tmp
						fi
							echo $servers"|"$groupname"-"$j >> $FILE1.tmp
					else
						if [ $DEBUG -ge 1 ];then
							echo "No group name found for $servers - either does not match server convention at top of script"
							echo "or : AUTO_GROUPING is set to 0 and -g is not used in option given"
							echo $servers $FILE1.tmp
						fi
					echo $servers >> $FILE1.tmp
					fi
				done
			done
		FILE=$FILE1.tmp
		fi
	}

#############################################################################################



#############################################################################################
# this is the main core of the code that actually goes about creating the terminator layout
# uses some other sub procedures below it to create the parents children and terminals
#  i.e. -a -f -s 

function set_terminator() { 
set_resolution;
	set_windows;
	if [ "$USERCHOICE" == "F" ];then
		layabout=`echo $FILE |awk -F"/" '{print $NF}'|awk -F"." '{print $1}'`
		layout=$layabout"_"$WINDOWS
	elif [ "$USERCHOICE" == "A" ]; then
		layout=$environment"_"$apptype"_"$conapps"_"$WINDOWS
	elif [ "$USERCHOICE" == "I" ]; then
		#layout=$servernames"_"$WINDOWS	
		layout=$input_layout"_"$WINDOWS	
	else
		layout="layout_"$WINDOWS
	fi
	if [ $DEBUG -ge 1 ];then
		layout="test_"$layout
	fi

		if [ "$DEFINED_LAYOUT" != "" ]; then
		layout=$DEFINED_LAYOUT
	fi
	#changed from asking to giving -r option which sets auto removal

	if [ $REMOVE_LAYOUT -ge 1 ] && [ "$layout" != "" ];then
		del_entry
	fi
	# If REUSE_LAYOUT_PROMPT IS SET TO 1 and -r not used to prompt for
		# re-usage of existing layouts
		if [ $REMOVE_LAYOUT -le 0 ] && [ $REUSE_LAYOUT_PROMPT -ge 1 ];then
		check_layout;
		fi

	find_layout;
	if [ $LAYOUT_FOUND -le 0 ] ;then
		nm="";
		appnames=""
		for names in `cat $FILE`
		do
			nm=$nm" "$names
			appnames=$appnames"_"$names
		done
		serverarray=( $nm )
		servercount=`wc -l $FILE|awk '{print $1}'`
		if [ $WINDOWS -gt $servercount ]; then
			WINDOWS=$servercount;
		fi

		if [ $servercount -eq 1 ]; then
			tabs=1;
			tabamount=1;
		else
			tabs=`expr $servercount / $WINDOWS`
			tabsamount=`echo "scale=1; $servercount / $WINDOWS"|bc|awk -F"." '{print $2}'`
		fi
		if [ "$tabsamount" != "0" ] && [ "$tabsamount" != "" ];then
			(( tabs++ ))
		fi
		tabtotal=$tabs
	
		
		labels="";
		pane="HPaned";
		z=0;
		currentid=0;
		previousid=0;
		colourit green  "Total servers $servercount  | Tabs required $tabtotal |   LAYOUT= $layout $0 -c to reconnect"
		for ((tabsi=0; tabsi < $tabtotal; tabsi++))
		do
		if [ "$labels" == "" ];then
				#labels="tab_$tabsi";
				labels="None";
			else
				#labels=$labels", tab_$tabsi"
				labels=$labels", None";
			fi
		done
		CONFIG_LAYOUT=$CONFIG_LAYOUT" [layouts]\n  [[$layout]]\n   [[[child0]]]\n   position = 0:0\n   type = Window\n   order = 0\n   parent = \"\"\n   size = $horizontal,$vertical\n";
		previousid=$currentid;
		previouschildid=$currentid
		previouschildid1=$currentid
		((currentid++))
		
		addid=0;
		if [ $tabtotal -gt 1 ]; then
			CONFIG_LAYOUT=$CONFIG_LAYOUT" [[[child$currentid]]]\n   labels = $labels\n   type = Notebook\n   order = 0\n   parent = child$previouschildid\n";
			addid=1;
		else
			if [ $servercount -gt 2 ]; then
				CONFIG_LAYOUT=$CONFIG_LAYOUT" [[[child$currentid]]]\n   position = 100\n   type = VPaned\n   order = 0\n   parent = child$previouschildid\n";
				addid=1;
			fi
		fi
		if [ "$addid" == "1" ]; then
			previouschildid1=$currentid
			previoustabid=$currentid
			previousid=$currentid;
			((currentid++))
		fi;

		currentserversize=$servercount;
		if  [[ $WINDOWS = 1 ]] || [[ $WINDOWS = 2 ]]; then 
			splitsize=1;
		else
			splitsize=`echo "scale = 0 ; $WINDOWS / 2" | bc `
			#splitsamount=`echo "scale=0;  $WINDOWS / 2 "| bc `
			#if [ "$splitsamount" != "0" ] && [ "$splitsamount" != "" ];then
			#	(( splitsize++ ))
			#fi
		fi
		a=0; b=0; bb=0;
		for ((tabsi=0; tabsi < $tabtotal; tabsi++))
		do
		((b++))
		((bb++))
		((a++))
		ab=0;position=0;cval=0;
		position=`expr $horizontal / 2`
		if   [ $b -ge 2  ]; then
			ab=1;  b=0;  
		fi 
		if [ $tabsi -ge 1 ]; then
			cval=`expr $a - 1`
		fi
		if [ $tabtotal -gt 1 ]; then
			CONFIG_LAYOUT=$CONFIG_LAYOUT"   [[[child$currentid]]]\n   position = $position\n   type = HPaned\n   order = $cval\n   parent = child$previouschildid1\n";
			previoustabid=$currentid
			previousid=$currentid;
			previouschildid2=$currentid
			((currentid++))  
		else
			previoustabid=$currentid
			previousid=$currentid;
			previouschildid2=$currentid
		fi

		#  winpos=`expr $position / 2`
		winpos="";
		gg=0 lastorder=0;
		for ((o=0; o < $splitsize; o++))
		do
			((bb++))
			((gg++))
			if   [ $bb -ge 2  ]; then
				if [ $tabtotal -gt 1 ]; then
					pane="VPaned";
			else
				pane="HPaned"
			fi
			bb=0;
			else
				if [ $tabtotal -gt 1 ]; then
					pane="VPaned";
				else
					pane="HPaned"
				fi
			fi
			if [ $splitsize -gt 2 ]; then
				if [ $gg -ge 2 ]; then 
					gg=0;
					create_child2;
					create_terminals;
				else
					childbefore=$currentid;
					create_child;
					create_child2;
					create_terminals;
				fi
			else
				if  [ $tabtotal -gt 1 ] && [ $WINDOWS -gt 2 ] || [ $tabtotal -eq 1 ] && [ $WINDOWS -ge 2 ] ;then
					create_child;
					create_terminals;
				else
					if [ $tabtotal -gt 1 ];then 
						previousid=$currentid;
						((previousid--))
						terminal_id=$currentid;
						create_terminals;
					else
						((previousid--))
						create_terminals;
					fi
				fi
			fi
			done
		done
	fi
	process_config;
}

#############################################################################################



#############################################################################################
# called by set_terminator to create children for terminals

function create_child() { 
		if [ $lastorder -eq 1 ]; then 
		lastorder=1;
		lastord=1;
		((lastorder--))
		else
		lastord=0;
		lastorder=0;
		((lastorder++))
		fi  
	lastval=0;
	if  [ $tabtotal -gt 1 ] ; then
		lastval=$previouschildid2;
	else
		lastval=$previouschildid1;
	fi
	CONFIG_LAYOUT=$CONFIG_LAYOUT" [[[child$currentid]]]\n   position = $winpos\n   type = $pane\n   order =$lastord\n   parent=child$lastval\n";
	previousid=$currentid;
	((currentid++)) 
	terminal_id=$currentid;
}


#############################################################################################
# called by set_terminator to create children for terminals in bigger window requirements


function create_child2() { 
	if [ $tabtotal -gt 1 ]; then
	CONFIG_LAYOUT=$CONFIG_LAYOUT" [[[child$currentid]]]\n   position = $winpos\n   type= $pane\n   order = $bb\n   parent = child$childbefore\n";
	else
	CONFIG_LAYOUT=$CONFIG_LAYOUT" [[[child$currentid]]]\n   position = $winpos\n   type =$pane\n   order = $bb\n   parent = child$childbefore\n";
	fi
	previousid=$currentid;
	((currentid++)) 
	terminal_id=$currentid;
}
#############################################################################################


#############################################################################################
# called by set_terminator to create actual terminals per server

function create_terminals() {
		for ((ee=0; ee < 1; ee++)) 
		do
			currserver2=""; currserver1=""; currserver=""; 
			currgroup2=""; currgroup1=""; currentgroup2="" currentgroup1="";
			m1=`expr $servercount - $currentserversize`
			((currentserversize--))

			if [ $WINDOWS -ge 2 ]; then
				m2=`expr $servercount - $currentserversize`
				((currentserversize--))
				
				currserver=${serverarray[$m2]}
				if [[ $currserver =~ | ]]; then
					currserver2=`echo $currserver|awk -F"|" '{print $1}'`
					currgroup2=`echo $currserver|awk -F"|" '{print $2}'`
				else
					currserver2=$currserver
				fi
			fi
			c=0; d=1;
			command1="";
			command2="";
			currserver=${serverarray[$m1]}
			if [[ $currserver =~ | ]]; then
				currserver1=`echo $currserver|awk -F"|" '{print $1}'`
				currgroup1=`echo $currserver|awk -F"|" '{print $2}'`
			else
				currserver1=$currserver
			fi

			if [ $DEBUG -ge 1 ]; then
			echo " ---> $currserver1 $m1"
			echo " ---> $currserver2 $m2"
			fi
			if [ -n "$currserver1" ]; then
				if [ $DEBUG -ge 2 ]; then
					command1="command = ssh $currserver1"
				else
					if [ -n "$VPN_SERVER" ]; then 
						#command1="command = ssh $currserver1"
						command1="command = ssh -o ProxyCommand=\"ssh -W %h:%p $VPN_SERVER\" $currserver1"
						#command1="command = ssh -tt -p $VPN_PORT $VPN_SERVER -C \"ssh $currserver2\""
					else
						command1="command = ssh $currserver1"
					fi
				fi 
			if [ -n "$currgroup1" ];then 
				currentgroup1="group = $currgroup1"
			fi
			fi
			if [ -n "$currserver2" ];then
				if [ $DEBUG -ge 2 ]; then
					command2="command = ssh $currserver2"
				else
					if [ -n "$VPN_SERVER" ]; then 
						#command2="command = ssh $currserver2"
						command2="command = ssh -o ProxyCommand=\"ssh -W %h:%p $VPN_SERVER\" $currserver2"
						#command1="command = ssh -tt -p $VPN_PORT $VPN_SERVER -C \"ssh $currserver2\""
					else
						command2="command = ssh $currserver2"
					fi
					#command2="command = ssh $currserver2"
				fi
				if [ -n "$currgroup2" ];then 
					currentgroup2="group = $currgroup2"
				fi
			fi
			CONFIG_LAYOUT=$CONFIG_LAYOUT" [[[terminal$terminal_id]]]\n   profile = default\n   "$command1"\n   "$currentgroup1"\n   type = Terminal\n   order = $c\n   parent = child$previousid\n";
			((terminal_id++))
			#if  [ "$currserver2" != "" ] && [ $servercount -gt 1 ] &&  [ $currentserversize -ne $servercount ]; then 
			if [ $servercount -gt 1 ]; then
				CONFIG_LAYOUT=$CONFIG_LAYOUT" [[[terminal$terminal_id]]]\n   profile = default\n   "$command2"\n   "$currentgroup2"\n   type = Terminal\n   order = $d\n   parent = child$previousid\n";
				((terminal_id++))	
			fi
			currentid=$terminal_id;
			done
}

#############################################################################################



#############################################################################################	      
function usage() { 
	clear;
	colourit red "options: "
	echo -e "-r  | --removelayout   			| remove layout and refresh it"
	echo -e "-fs | --fullscreen  				| start session in full screen mode, Override FULL_SCREEN_MODE=0"
	echo -e "-g  | --group  					| groups server as per naming set_apptype, Override AUTO_GROUPING_ENABLED=0"
	echo -e "-w  | --windows   [2/4/8 ]  		| -w followed by 2 or 4 or 8 windows per tab"
	echo -e "-v  | --vpn_host  [user@vpnip ]  	| remoteuser@locahost"
	echo -e "-vp | --vpn_port  [2001 ]  		| vpn port for above host to connect through"
	echo -e "-x  | --times  	[1-10 ]  		| -x followed by 1 to any number above - reconnect value per server"
	echo -e "-n  | --layoutname  \"something or another\" 	| -n followed by a layout name in speech marks if it has spaces"
	colourit red  "Followed by either:"
	echo -e "-s  | --servers | \"apache01 mysql[02-05][a-j] gateway(a|b)[01-02] oracle02\"	| must be in speech marks if regex input."
	echo -e "  This will connect to initial server of apache01 then also connect to mysql02 to 05 a j so mysql02a - mysql05-j every combination"
	echo -e  " followed by gatewaya01 gatewaya01 gatewaya02 gatewayb01 gatewayb02 finally oracle02 "
	echo -e "You may use round brackets to look for either pattern and square brackets for wild card such as d-h or 5-10 which it will then go through this loop"
	echo;
	echo -e "-f  | --file [./mail.txt]			| where mail.txt contains list of mail servers"
	echo -e "Typical file could be single server names or like above brace expansion / regex : "
	echo -e "one server per line it can be either something like:"
	echo -e "mail01"
	echo -e "mysql-(lon|gla)-[01-03]"
	echo -e "where it will connect to simple host as well as match all hosts of mysql-lon-01 mysql-gla-01 mysql-lon-02 mysql-gla-02 mysql-lon-03 mysql-gla-03"
	echo;
	colourit black "Usage: `basename $0`  [-h {for help}]  | [-c {connect to existing layouts} ] |  [-d {delete existing layout} ]" 
	colourit black "Usage: `basename $0`  [-l {for list servers} followed by prod/stage/uat atjmo app1 app2 app3 app4 app5 app6 ]  "
	colourit black "Usage: `basename $0`  [-r  remove layout and recreate ] [-fs {fullscreen mode} ] [-w {windows} 2/4/8] [-f {for file} filename ]";
	colourit black "Usage: `basename $0`  [-r  remove layout and recreate ] [-fs {fullscreen mode} ] [-w {windows} 2/4/8] [-s {server1,server2,server3} ";

	echo;colourit red "Command Line Input CLI  connect example:";
	colourit black "EXAMPLE :  `basename $0` -fs -x 2 -w 8 -n custom_server1 -s \"(apache|mysql)-[01-03][a-b] gateway[01-03]\"  {Fullscreen mode, 8 windows per tab connect twice per server brace expand patterns and connect to"
	 colourit black "  apache01a apache01b mysql01a mysql01b ... mysql01-03a/b servers as well as gateway01 gateway02 gateway03 set the layout name to custom_server1 for reconnection" 

	colourit black "EXAMPLE :  `basename $0` -r -w 2 -x 3 -s montct01,monapa01  {Remove layout 2 windows per tab X 3 comma seperated list i.e. 3 times to monstct01 and 3 times to monsapa01  2 per tab = 3 tabs } "
	

	echo;colourit red "File connect example:";
	colourit black "EXAMPLE :  `basename $0` -w 8 -f ./servers.txt     {Go through servers.txt and connect to all with 8 windows per tab } "
	colourit black "EXAMPLE :  `basename $0` -r -w 8 -f ./servers.txt  {Remove layout go through file and connect 8 windows per tab} "
	
	echo; 
	echo;colourit red "Existing Layout connection:";
	colourit black "EXAMPLE :  `basename $0` -c   {List existing layouts and give u numeric option to connect to them} "

	echo;colourit red "Removal of existing layout:";
	colourit black "EXAMPLE :  `basename $0` -d   {List existing layouts and give u numeric option to remove 1} "

	
}
#############################################################################################



#############################################################################################
function colourit() {
	type=$1;
	input=$2;
	escape_start="\\033";
	cyan=$escape_start"[0;36m";
	brightyellow=$escape_start"[1;33m"
	brightmagenta=$escape_start"[1;35m"
	brightred=$escape_start"[1;31m"
	brightgreen=$escape_start"[1;32m"
	escape_end="\033[0m"
	bgred=$escape_start"[1;33m"$escape_start"[41m"
	bggreen=$escape_start"[1;33m"$escape_start"[42m"
	bgblue=$escape_start"[1;1m"$escape_start"[44m"
	bgblack=$escape_start"[1;1m"$escape_start"[40m"
	if [ "$type" == "red" ]; then
		out1="$bgred$input$escape_end";
	elif [ "$type" == "green" ]; then
		out1="$bggreen$input$escape_end";
	elif [ "$type" == "blue" ]; then
		out1="$bgblue$input$escape_end";
	elif [ "$type" == "black" ]; then
		out1="$bgblack$input$escape_end";
	fi
	echo  -e $out1
}

#############################################################################################

# Check if the logged in user is root and give option to exit code
function check_root() { 
if [ $userid -eq 0 ];then
 colourit red "Warning you are logged in as root and about to ssh to hosts continue (y/n)?"
 read userinput;
 if [ "$userinput" == "n" ]; then
		exit;
 fi
fi

}



USERCHOICE=""
REMOVE_LAYOUT=0;
while test -n "$1"; do
	case "$1" in
		--help|-h)
			usage
			exit 0
			;;
		--windows|-w)
			WINDOWS=$2;
			go="false";
			if   [[ $WINDOWS = 1 ]] || [[ $WINDOWS = 2 ]] || [[ $WINDOWS = 4 ]] || [[ $WINDOWS = 8 ]]; then 
				go="true";
			else
				WINDOWS=$DEFAULT_WINDOWS;
			fi
				
			if [ "$go" == "false" ]; then
				echo "ERROR - WINDOWS CAN ONLY BE 2, 4 or 8 "
				exit 1;
			fi
				
			shift
			;;
		--fullscreen|-fs)
			FULL_SCREEN_MODE=1;
			#shift
			;;
		--group|-g)
			AUTO_GROUPING_ENABLED=1;
			#shift
			;;
		--vpn-host|-v)
			VPN_SERVER=$2;
			if [ -n "$VPN_SERVER" ];then 
				querymethod="disabled";
			fi
			shift;
			;;
		--vpn-port|-vp)
			VPN_PORT=$2;
			shift;
			;;
		--connect|-c)
			connect_existing_layout
			shift
			;;
		connect)
			layout=$2;
			echo "connecting to $layout"
			terminator -l "$layout" 2>/dev/null  &
			#terminator_connect;
			exit 0;
			;;
		--del|-d)
			delete_existing_layout;
			shift;
			;;
		--removelayout|-r)
			REMOVE_LAYOUT=1;
			#shift;
			;;
		--times|-x)
			reconnect=$2;
			shift;
			;;
		--layoutname|-n)
			DEFINED_LAYOUT=$2;
			shift;
			;;
		--servers|-s)
			USERCHOICE="I"
			servernames=$2
			read_cli_servers;
			terminator_connect;
			exit 0;
			;;
		 --list|-l)
			environment=$2
			apptype=$3
			apparray=( $4 $5 $6 $7 $8 $9 )
			echo "Listing servers for  $environment $apptype"
			set_environment;
			set_apptype;
			if [ "$environment" == "" ] || [ "$apptype" == "" ] ; then
				usage
				exit 1;
			fi
			DEBUG=1;
			validate_servers;
				exit 0;
			;;
		--file|-f)
			USERCHOICE="F"
			FILE=$2
			terminator_connect;
			exit 0;
			;;
		--shell-options|-so)
			 echo "connect --help -h  --windows -w   --fullscreen -fs  --group -g   --connect -c c --del -d  --removelayout -r  --times -x   --layoutname -n  --servers -	s   --list -l  --file -f  --vpn-host -v  -vpn-port -vp "
			exit 0
			;;
		*)
		echo "Unknown argument: $1"
		echo "-h for help";
		exit 1
			;;
	esac
	shift
done

#############################################################################################

#############################################################################################
if [ $# -eq 0 ]; then
	 echo "-h for help";
	exit 1;
fi
#############################################################################################
